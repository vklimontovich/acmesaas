datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String            @id @default(cuid())
  name              String?
  email             String            @unique
  image             String?
  sessions          Session[]
  admin             Boolean?          @default(false)
  provider          String
  providerAccountId String
  memberships       Membership[]
  invitationsSent   TeamInvitation[]  @relation("InvitationsSent")
  invitationsUsed   TeamInvitation[]  @relation("InvitationsUsed")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id          String           @id @default(cuid())
  name        String
  slug        String           @unique
  memberships Membership[]
  settings    TeamSettings[]
  invitations TeamInvitation[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  deletedAt   DateTime?
  billing     TeamBilling?
}

model TeamBilling {
	id		  String           @id @default(cuid())
	teamId	  String @unique
	team	  Team             @relation(fields: [teamId], references: [id])
	stripeCustomerId String
	stripeSubscriptionId String
}

model TeamInvitation {
  id               String  @id @default(cuid())
  email            String
  code             String
  invitedByUserId  String
  usedByUserId     String?
  teamId           String
  invitedByUser    User    @relation("InvitationsSent", fields: [invitedByUserId], references: [id])
  usedByUser       User?   @relation("InvitationsUsed", fields: [usedByUserId], references: [id])
  team             Team    @relation(fields: [teamId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Membership {
  id     String @id @default(cuid())
  userId String
  teamId String
  role   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([userId, teamId])
  @@index([userId, teamId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model TeamSettings {
  id     String @id @default(cuid())
  teamId String
  team   Team   @relation(fields: [teamId], references: [id])
  name   String
  value   Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([teamId, name])
  @@index([teamId, name])
}